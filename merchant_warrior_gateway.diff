From ac98881955fbf794d7a95bce6df1190503ae19a8 Mon Sep 17 00:00:00 2001
From: Eric Himmelreich <eahimmel@gmail.com>
Date: Mon, 18 Oct 2010 18:01:36 -0400
Subject: [PATCH] added merchant_warrior gateway, supports purchase and credit

---
 Rakefile                                           |    2 +-
 .../billing/gateways/merchant_warrior.rb           |  141 ++++++++++++++++++++
 test/fixtures.yml                                  |    7 +-
 .../gateways/remote_merchant_warrior_test.rb       |   67 +++++++++
 test/unit/gateways/merchant_warrior_test.rb        |  135 +++++++++++++++++++
 5 files changed, 350 insertions(+), 2 deletions(-)
 create mode 100644 lib/active_merchant/billing/gateways/merchant_warrior.rb
 create mode 100644 test/remote/gateways/remote_merchant_warrior_test.rb
 create mode 100644 test/unit/gateways/merchant_warrior_test.rb

diff --git a/Rakefile b/Rakefile
index 572d2e7..c9c3485 100644
--- a/Rakefile
+++ b/Rakefile
@@ -89,4 +89,4 @@ namespace :gateways do
     OutboundHosts.list
   end
   
-end
\ No newline at end of file
+end
diff --git a/lib/active_merchant/billing/gateways/merchant_warrior.rb b/lib/active_merchant/billing/gateways/merchant_warrior.rb
new file mode 100644
index 0000000..139b16d
--- /dev/null
+++ b/lib/active_merchant/billing/gateways/merchant_warrior.rb
@@ -0,0 +1,141 @@
+require 'digest/md5'
+require 'rexml/document'
+
+module ActiveMerchant #:nodoc:
+  module Billing #:nodoc:
+    class MerchantWarriorGateway < Gateway
+      TEST_URL = 'https://base.merchantwarrior.com/post/'
+      LIVE_URL = 'https://api.merchantwarrior.com/post/'
+
+      # The countries the gateway supports merchants from as 2 digit
+      # ISO country codes
+      self.supported_countries = ['AU']
+
+      # The card types supported by the payment gateway
+      self.supported_cardtypes = [:visa, :master, :american_express,
+                                  :diners_club, :discover]
+
+      # The homepage URL of the gateway
+      self.homepage_url = 'http://www.merchantwarrior.com/'
+
+      # The name of the gateway
+      self.display_name = 'MerchantWarrior'
+
+      self.money_format = :dollars
+      self.default_currency = 'AUD'
+
+      SUCCESS_CODES = ['0']
+
+      def initialize(options = {})
+        requires!(options, :merchant_uuid, :api_key, :api_passphrase)
+        @options = options
+        super
+      end
+
+      def test?
+        @options[:test] || super
+      end
+
+      def purchase(money, creditcard, options = {})
+        post = {}
+        add_product(post, options)
+        add_creditcard(post, creditcard)
+        add_address(post, creditcard, options)
+        add_customer_data(post, options)
+
+        commit('processCard', money, post)
+      end
+
+      def credit(money, identification, options = {})
+        requires!(options, :credit_amount)
+        commit('refundCard', money, {
+                 'transactionID' => identification,
+                 'refundAmount' => options[:credit_amount]
+               })
+      end
+
+      private
+
+      def verification_hash(money)
+        Digest::MD5.
+          hexdigest((@options[:api_passphrase].to_s +
+                     @options[:merchant_uuid].to_s +
+                     money.to_s +
+                     (@options[:currency] || currency(money))).downcase)
+      end
+
+      def add_customer_data(post, options)
+        post.merge!('customerName' => options[:address[:name]])
+      end
+
+      def add_address(post, creditcard, options)
+        post.merge!('customerCountry' => options[:address[:country]],
+                    'customerState' => options[:address[:state]],
+                    'customerCity' => options[:address[:city]],
+                    'customerAddress' => options[:address[:address1]],
+                    'customerPostCode' => options[:address[:zip]])
+      end
+
+      def add_product(post, options)
+        post.merge!('transactionProduct' => options[:transaction_product])
+      end
+
+      def add_creditcard(post, creditcard)
+        four_digit_expiry = creditcard.expiry_date.expiration.strftime("%m%y")
+
+        post.merge!('paymentCardNumber' => creditcard.number,
+                    'paymentCardName' => creditcard.name,
+                    'paymentCardExpiry' => four_digit_expiry)
+      end
+
+      def parse(body)
+        xml = REXML::Document.new(body)
+
+        response = {}
+
+        xml.root.elements.to_a.each do |node|
+          parse_element(response, node)
+        end
+
+        response
+      end
+
+      def parse_element(response, node)
+        if node.has_elements?
+          node.elements.each{|element| parse_element(response, element) }
+        else
+          response[node.name.underscore.to_sym] = node.text
+        end
+      end
+
+      def commit(action, money, parameters)
+        url = test? ? TEST_URL : LIVE_URL
+        data = ssl_post(url, post_data(action, money, parameters))
+
+        response = parse(data)
+        Response.new(success?(response), message_from(response), response,
+                     :test => test?)
+      end
+
+      def message_from(response)
+        response[:responseMessage]
+      end
+
+      def success?(response)
+        SUCCESS_CODES.include?(response[:response_code])
+      end
+
+      def post_data(action, money,parameters = {})
+        parameters.merge({
+          'method' => action,
+          'merchantUUID' => @options[:merchant_uuid],
+          'apiKey' => @options[:api_key],
+          'hash' => verification_hash(money),
+          'transactionAmount' => money.to_s,
+          'transactionCurrency' => currency(money),
+        }).collect { |key, value| "#{key}=#{CGI.escape(value.to_s)}" }.join("&")
+      end
+    end
+  end
+end
+
diff --git a/test/fixtures.yml b/test/fixtures.yml
index 8ec83fa..8ef38aa 100644
--- a/test/fixtures.yml
+++ b/test/fixtures.yml
@@ -384,4 +384,9 @@ garanti:
   password: 'userpayment'
   
 direc_pay:
-  mid: 200904281000001
\ No newline at end of file
+  mid: 200904281000001
+
+merchant_warrior:
+  merchant_uuid: '4b6bb68c75487'
+  api_key: 'jwcd0uz1'
+  api_passphrase: 'k9hflvig'
diff --git a/test/remote/gateways/remote_merchant_warrior_test.rb b/test/remote/gateways/remote_merchant_warrior_test.rb
new file mode 100644
index 0000000..a42ccb4
--- /dev/null
+++ b/test/remote/gateways/remote_merchant_warrior_test.rb
@@ -0,0 +1,67 @@
+require 'test_helper'
+
+class RemoteMerchantWarriorTest < Test::Unit::TestCase
+
+  def setup
+    test_values = fixtures(:merchant_warrior)
+
+    test_values[:test] = true
+    @gateway = MerchantWarriorGateway.new(test_values)
+
+    @success_amount = '100.00'
+    @failure_amount = '100.33'
+    @credit_card = credit_card('5123456789012346',
+                               :month => 5,
+                               :year => 2013,
+                               :verification_value => '123',
+                               :type => 'master')
+
+    @options = {
+      :address => {
+        :name => 'Longbob Longsen',
+        :country => 'AU',
+        :state => 'Queensland',
+        :city => 'Brisbane',
+        :address1 => '123 test st',
+        :zip => '4000'
+      },
+      :transaction_product => 'TestProduct',
+      :credit_amount => @success_amount
+    }
+
+  end
+
+  def test_successful_purchase
+    assert response = @gateway.purchase(@success_amount, @credit_card, @options)
+    assert_equal 'Transaction approved', response.params["response_message"]
+    assert_success response
+  end
+
+  def test_unsuccessful_purchase
+    assert response = @gateway.purchase(@failure_amount, @credit_card, @options)
+    assert_equal 'Card has expired', response.params["response_message"]
+    assert_failure response
+  end
+
+  def test_successful_credit
+    #first make a purchase, to be credited
+    assert response = @gateway.purchase(@success_amount, @credit_card, @options)
+    transaction_id = response.params["transaction_id"]
+
+    assert response = @gateway.credit(@success_amount, transaction_id,
+                                      @options)
+
+    assert_instance_of Response, response
+    assert_equal 'Transaction approved', response.params["response_message"]
+    assert_success response
+  end
+
+  def test_unsuccessful_credit
+    assert response = @gateway.credit(@success_amount, 'invalid-transaction-id',
+                                      @options)
+    assert_instance_of Response, response
+    assert_equal 'MW - 011:Invalid transactionID', response.params["response_message"]
+    assert_failure response
+  end
+
+end
diff --git a/test/unit/gateways/merchant_warrior_test.rb b/test/unit/gateways/merchant_warrior_test.rb
new file mode 100644
index 0000000..2bef480
--- /dev/null
+++ b/test/unit/gateways/merchant_warrior_test.rb
@@ -0,0 +1,135 @@
+require 'test_helper'
+
+class MerchantWarriorTest < Test::Unit::TestCase
+  def setup
+    @gateway = MerchantWarriorGateway.new(
+                 :merchant_uuid => '4b6bb68c75487',
+                 :api_key => 'jwcd0uz1',
+                 :api_passphrase => 'k9hflvig'
+               )
+
+    @credit_card = credit_card
+
+
+    @success_amount = '100.00'
+    @transaction_id = '30-98a79008-dae8-11df-9322-0022198101cd'
+
+    @failure_amount = '100.33'
+
+    @options = {
+      :credit_amount => @success_amount
+    }
+  end
+
+  def test_successful_purchase
+    @gateway.expects(:ssl_post).returns(successful_purchase_response)
+
+    assert response = @gateway.purchase(@success_amount, @credit_card, @options)
+    assert_instance_of Response, response
+    assert_equal 'Transaction approved', response.params["response_message"]
+    assert_success response
+
+    assert response.test?
+  end
+
+  def test_unsuccessful_purchase
+    @gateway.expects(:ssl_post).returns(failed_purchase_response)
+
+    assert response = @gateway.purchase(@failure_amount, @credit_card, @options)
+    assert_instance_of Response, response
+    assert_equal 'Card has expired', response.params["response_message"]
+    assert_failure response
+    assert response.test?
+  end
+
+  def test_successful_credit
+    @gateway.expects(:ssl_post).returns(successful_credit_response)
+
+    assert response = @gateway.credit(@success_amount, @transaction_id,
+                                      @options)
+    assert_instance_of Response, response
+    assert_equal 'Transaction approved', response.params["response_message"]
+    assert_success response
+
+    assert response.test?
+  end
+
+  def test_unsuccessful_credit
+    @gateway.expects(:ssl_post).returns(failed_credit_response)
+
+    assert response = @gateway.credit(@success_amount, @transaction_id,
+                                      @options)
+    assert_instance_of Response, response
+    assert_equal 'MW -016:transactionID has already been reversed', response.params["response_message"]
+    assert_failure response
+    assert response.test?
+  end
+
+  
+  private
+
+  # Place raw successful response from gateway here
+  def successful_purchase_response
+    <<-XML
+<?xml version="1.0" encoding="UTF-8"?>
+<mwResponse>
+  <responseCode>0</responseCode>
+  <responseMessage>Transaction approved</responseMessage>
+  <transactionID>30-98a79008-dae8-11df-9322-0022198101cd</transactionID>
+  <authCode>44639</authCode>
+  <authMessage>Approved</authMessage>
+  <authResponseCode>0</authResponseCode>
+  <authSettledDate>2010-10-19</authSettledDate>
+  <custom1></custom1>
+  <custom2></custom2>
+  <custom3></custom3>
+  <customHash>c0aca5a0d9573322c79cc323d6cc8050</customHash>
+</mwResponse>
+    XML
+  end
+
+  # Place raw failed response from gateway here
+  def failed_purchase_response
+    <<-XML
+<?xml version="1.0" encoding="UTF-8"?>
+<mwResponse>
+  <responseCode>4</responseCode>
+  <responseMessage>Card has expired</responseMessage>
+  <transactionID>30-69433444-af1-11df-9322-0022198101cd</transactionID>
+  <authCode>44657</authCode>
+  <authMessage>Expired+Card</authMessage>
+  <authResponseCode>4</authResponseCode>
+  <authSettledDate>2010-10-19</authSettledDate>
+  <custom1></custom1>
+  <custom2></custom2>
+  <custom3></custom3>
+  <customHash>c0aca5a0d9573322c79cc323d6cc8050</customHash>
+</mwResponse>
+    XML
+  end
+
+  def successful_credit_response
+    <<-XML
+<?xml version="1.0" encoding="UTF-8"?>
+<mwResponse>
+  <responseCode>0</responseCode>
+  <responseMessage>Transaction approved</responseMessage>
+  <transactionID>30-d4d19f4-db17-11df-9322-0022198101cd</transactionID>
+  <authCode>44751</authCode>
+  <authMessage>Approved</authMessage>
+  <authResponseCode>0</authResponseCode>
+  <authSettledDate>2010-10-19</authSettledDate>
+</mwResponse>
+    XML
+  end
+
+  def failed_credit_response
+    <<-XML
+<?xml version="1.0" encoding="UTF-8"?>
+  <mwResponse>
+  <responseCode>-2</responseCode>
+  <responseMessage>MW -016:transactionID has already been reversed</responseMessage>
+</mwResponse>
+    XML
+  end
+end
-- 
1.7.3.1

