require 'net/http'

module ActiveMerchant #:nodoc:
  module Billing #:nodoc:
    module Integrations #:nodoc:
      
      # Example:
      # * You may use this on your controller
      # * This is for datafeed function (similar to PayPal's IPN). This is for receiving payment result from PayDollar via web service/server posting.
      # * On this example, there is a 'Cart' class 
      #
      # notification = Paydollar::Notification.new(request.raw_post, options = {:credential2 => "your_secure_hash_secret_from_paydollar", :hasSecureHashEnabled => true})
      #
      # cart = Cart.find(notification.order_number)
      #    
      # if notification.validate_secure_hash      
      #  if notification.complete?      
      #    cart.status = 'success'
      #    cart.purchased_at = Time.now      
      #    cart.save      
      #    render :text =>"OK - Success. Status Updated"      
      #  else      
      #      if cart.status != 'success'              
      #        cart.status = 'fail'
      #        cart.purchased_at = Time.now      
      #        cart.save          
      #        render :text =>"OK - Failed. Status Updated"
      #      else          
      #        render :text =>"OK - Failed. Status Not Updated as its already previously updated to '" + cart.status + "'"          
      #      end      
      #  end       
      # else
      #  render :text =>"OK - Invalid SecureHash. Please check the 'secure hash secret'"
      # end
      
      module Paydollar
        class Notification < ActiveMerchant::Billing::Integrations::Notification
          
          # the result of the payment. '0' means success
          def complete?
            successcode == '0' 
          end
          
          def successcode
            params['successcode']
          end
          
          def status
            complete?
          end

          # the orderRef (order) value sent to Paydollar
          def item_id
            params['Ref'] 
          end
          
          def order_number 
            item_id
          end

          # the payment reference number generated by Paydollar
          def transaction_id
            params['PayRef'] 
          end

          # When was this payment received by the client.
          def received_at
            params['TxTime']
          end

          # the money amount we received in X.2 decimal.
          def gross
            params['Amt']
          end
          
          # the primary response code 
          def primary_response_code
            params['prc']
          end
          
          # the secondary response code
          def secondary_response_code
            params['src']
          end
          
          # the bank reference number
          def bank_reference
            params['Ord']
          end
          
          # the card/account holder name
          def holder_name
            params['Holder']
          end
          
          # the currency
          def currency            
            curr_code_map = {
              '608' => 'PHP', 
              '840' => 'USD', 
              '344' => 'HKD', 
              '702' => 'SGD', 
              '156' => 'CNY', 
              '392' => 'JPY',
              '901' => 'TWD',
              '036' => 'AUD',
              '978' => 'EUR',
              '826' => 'GBP',
              '124' => 'CAD',
              '446' => 'MOP',
              '764' => 'THB',
              '458' => 'MYR',
              '360' => 'IDR',
              '410' => 'KRW',
              '682' => 'SAR',
              '554' => 'NZD',
              '784' => 'AED',
              '096' => 'BND',
            }
            curr_code_map[params['Cur']]            
          end
          
          # the description sent to Paydollar via the remark field
          def description
            params['remark']
          end
          
          # the approval code
          def approval_code
            params['AuthId']
          end
          
          # the eci value for credit card transactions
          def eci_value
            params['eci']
          end
          
          # the payer authentication status
          def payer_auth_status
            params['payerAuth']
          end
          
          # the payer ip
          def payer_ip
            params['sourceIp']
          end
          
          # the payment method
          def payment_method
            params['payMethod']
          end
          
          # the card issuing country
          def card_issuing_country
            params['cardIssuingCountry']
          end
          
          # the PAN first 4 digits
          def pan_first4
            params['panFirst4']
          end
          
          # the PAN last 4 digits
          def pan_last4
            params['panLast4']
          end
          
          # the PAN last 4 digits
          def secure_hash
            params['secureHash']
          end
          
          def validate_secure_hash
            secure_hash_secret = @options[:credential2]
            has_secure_hash_enabled = @options[:hasSecureHashEnabled]
              
            if has_secure_hash_enabled == true
              
              if secure_hash_secret != nil and secure_hash_secret != ""
                
                if secure_hash != nil and secure_hash != ""
                  
                  secure_hash_list = secure_hash.split(",")
                  
                  has_valid = false
                  
                  i = 0
                  while i < secure_hash_list.length
                    
                    generated_key = Digest::SHA1.hexdigest(
                      secondary_response_code + "|" +
                      primary_response_code + "|" +
                      successcode + "|" +
                      item_id + "|" +
                      transaction_id + "|" +
                      params['Cur'] + "|" + 
                      gross + "|" +
                      payer_auth_status + "|" +
                      secure_hash_secret
                    )
                    
                    if generated_key == secure_hash_list.at(i)
                      has_valid = true
                    end
                    
                    i += 1
                  end
                  
                  return has_valid
                  
                else                  
                  return false
                end
                
              else
                return false 
              end
            
            else
              return true              
            end
              
          end
          
          private

          # Take the posted data and move the relevant data into a hash
          def parse(post)
            @raw = post.to_s
            for line in @raw.split('&')
              key, value = *line.scan( %r{^([A-Za-z0-9_.-]+)\=(.*)$} ).flatten
              params[key] = CGI.unescape(value.to_s) if key.present?
            end
          end
        end
      end
    end
  end
end
